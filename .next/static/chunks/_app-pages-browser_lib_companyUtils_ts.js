"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_companyUtils_ts"],{

/***/ "(app-pages-browser)/./lib/companyUtils.ts":
/*!*****************************!*\
  !*** ./lib/companyUtils.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CompanyService: function() { return /* binding */ CompanyService; },\n/* harmony export */   calculateSimilarity: function() { return /* binding */ calculateSimilarity; },\n/* harmony export */   companyService: function() { return /* binding */ companyService; },\n/* harmony export */   generateAliases: function() { return /* binding */ generateAliases; },\n/* harmony export */   getCompanyInsights: function() { return /* binding */ getCompanyInsights; },\n/* harmony export */   normalizeCompanyName: function() { return /* binding */ normalizeCompanyName; },\n/* harmony export */   updateCompanyInsights: function() { return /* binding */ updateCompanyInsights; }\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./firebase */ \"(app-pages-browser)/./lib/firebase.ts\");\n\n\n// Global cache with TTL\nconst CACHE_TTL = 5 * 60 * 1000; // 5 minutes\nlet companyCache = {\n    companies: [],\n    lastUpdated: 0,\n    isLoaded: false\n};\n/**\n * Normalize company name for consistent searching\n */ const normalizeCompanyName = (input)=>{\n    if (!input) return \"\";\n    return input.trim().toLowerCase().replace(/\\s+/g, \" \") // Normalize whitespace\n    .replace(/[^\\w\\s-]/g, \"\") // Remove special characters except hyphens\n    .replace(/\\b(inc|corp|corporation|llc|ltd|limited|co|company|group|holdings|enterprises|ventures|partners|associates)\\b/g, \"\") // Remove common suffixes\n    .replace(/\\b(the|a|an)\\b/g, \"\") // Remove common prefixes\n    .replace(/\\s+/g, \" \") // Normalize whitespace again\n    .trim();\n};\n/**\n * Generate aliases for a company name\n */ const generateAliases = (name, website)=>{\n    const aliases = [];\n    if (!name) return aliases;\n    // Add original name\n    aliases.push(name.trim());\n    // Add lowercase version\n    aliases.push(name.toLowerCase().trim());\n    // Add without common suffixes\n    const nameClean = name.toLowerCase().replace(/\\b(inc|corp|corporation|llc|ltd|limited|co|company|group|holdings|enterprises|ventures|partners|associates)\\b/g, \"\").replace(/\\s+/g, \" \").trim();\n    if (nameClean && nameClean !== name.toLowerCase().trim()) {\n        aliases.push(nameClean);\n    }\n    // Add domain-based alias if website exists\n    if (website) {\n        try {\n            const url = new URL(website);\n            const domain = url.hostname;\n            if (domain && domain !== name.toLowerCase()) {\n                aliases.push(domain);\n                // Add without www\n                if (domain.startsWith(\"www.\")) {\n                    aliases.push(domain.substring(4));\n                }\n            }\n        } catch (e) {\n        // Invalid URL, skip\n        }\n    }\n    // Remove duplicates and empty strings\n    return Array.from(new Set(aliases.filter((alias)=>alias.trim())));\n};\n/**\n * Calculate similarity between two strings using Levenshtein distance\n */ const calculateSimilarity = (str1, str2)=>{\n    if (!str1 || !str2) return 0;\n    const matrix = [];\n    const len1 = str1.length;\n    const len2 = str2.length;\n    // Initialize matrix\n    for(let i = 0; i <= len2; i++){\n        matrix[i] = [\n            i\n        ];\n    }\n    for(let j = 0; j <= len1; j++){\n        matrix[0][j] = j;\n    }\n    // Fill matrix\n    for(let i = 1; i <= len2; i++){\n        for(let j = 1; j <= len1; j++){\n            if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n                matrix[i][j] = matrix[i - 1][j - 1];\n            } else {\n                matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, matrix[i][j - 1] + 1, matrix[i - 1][j] + 1 // deletion\n                );\n            }\n        }\n    }\n    // Calculate similarity percentage\n    const maxLength = Math.max(len1, len2);\n    return maxLength === 0 ? 1 : (maxLength - matrix[len2][len1]) / maxLength;\n};\n/**\n * Optimized company search and management with caching\n */ class CompanyService {\n    static getInstance() {\n        if (!CompanyService.instance) {\n            CompanyService.instance = new CompanyService();\n        }\n        return CompanyService.instance;\n    }\n    /**\n   * Load all companies from database with caching\n   */ async loadAllCompanies() {\n        const now = Date.now();\n        // Return cached data if still valid\n        if (companyCache.isLoaded && now - companyCache.lastUpdated < CACHE_TTL) {\n            return companyCache.companies;\n        }\n        try {\n            if (!this.db) {\n                console.warn(\"Firebase not initialized\");\n                return [];\n            }\n            const companiesRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(this.db, \"companies\");\n            const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(companiesRef);\n            const companies = snapshot.docs.map((doc)=>{\n                var _data_lastSubmission, _data_createdAt, _data_updatedAt;\n                const data = doc.data();\n                return {\n                    id: doc.id,\n                    name: data.name || \"\",\n                    normalizedName: data.normalizedName || \"\",\n                    aliases: data.aliases || [],\n                    website: data.website,\n                    location: data.location,\n                    industry: data.industry,\n                    company_size: data.company_size,\n                    company_type: data.company_type,\n                    founded_year: data.founded_year,\n                    specialities: data.specialities,\n                    locations: data.locations,\n                    submissionCount: data.submissionCount || 0,\n                    lastSubmission: (_data_lastSubmission = data.lastSubmission) === null || _data_lastSubmission === void 0 ? void 0 : _data_lastSubmission.toDate(),\n                    commonFlags: data.commonFlags || [],\n                    averageFlagCount: data.averageFlagCount || 0,\n                    severityTrends: data.severityTrends || {\n                        light: 0,\n                        medium: 0\n                    },\n                    createdAt: (_data_createdAt = data.createdAt) === null || _data_createdAt === void 0 ? void 0 : _data_createdAt.toDate(),\n                    updatedAt: (_data_updatedAt = data.updatedAt) === null || _data_updatedAt === void 0 ? void 0 : _data_updatedAt.toDate()\n                };\n            });\n            // Update cache\n            companyCache = {\n                companies,\n                lastUpdated: now,\n                isLoaded: true\n            };\n            console.log(\"Loaded \".concat(companies.length, \" companies\"));\n            return companies;\n        } catch (error) {\n            console.error(\"Error loading companies:\", error);\n            return [];\n        }\n    }\n    /**\n   * Search companies with optimized caching\n   */ async searchCompanies(query) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n        if (!query.trim()) return [];\n        const companies = await this.loadAllCompanies();\n        const normalizedQuery = normalizeCompanyName(query);\n        const results = [];\n        for (const company of companies){\n            let bestScore = 0;\n            let matchType = \"fuzzy\";\n            // Check exact matches first\n            if (company.normalizedName === normalizedQuery) {\n                bestScore = 1.0;\n                matchType = \"exact\";\n            } else if (company.name.toLowerCase().includes(query.toLowerCase())) {\n                bestScore = 0.9;\n                matchType = \"partial\";\n            } else {\n                // Check aliases\n                for (const alias of company.aliases){\n                    const aliasNormalized = normalizeCompanyName(alias);\n                    if (aliasNormalized === normalizedQuery) {\n                        bestScore = 0.8;\n                        matchType = \"alias\";\n                        break;\n                    }\n                }\n                // If no exact matches, try fuzzy matching\n                if (bestScore === 0) {\n                    const similarity = calculateSimilarity(normalizedQuery, company.normalizedName);\n                    if (similarity > 0.7) {\n                        bestScore = similarity;\n                        matchType = \"fuzzy\";\n                    }\n                }\n            }\n            if (bestScore > 0) {\n                results.push({\n                    company,\n                    relevanceScore: bestScore,\n                    matchType\n                });\n            }\n        }\n        // Sort by relevance and return top results\n        return results.sort((a, b)=>b.relevanceScore - a.relevanceScore).slice(0, limit).map((result)=>result.company);\n    }\n    /**\n   * Find or create company with caching\n   */ async findOrCreateCompany(companyName) {\n        if (!companyName.trim()) {\n            throw new Error(\"Company name cannot be empty\");\n        }\n        // First try to find existing company\n        const searchResults = await this.searchCompanies(companyName, 1);\n        if (searchResults.length > 0) {\n            const bestMatch = searchResults[0];\n            const similarity = calculateSimilarity(normalizeCompanyName(companyName), bestMatch.normalizedName);\n            // If similarity is high enough, return existing company\n            if (similarity > 0.8) {\n                return bestMatch;\n            }\n        }\n        // Create new company if no good match found\n        return this.createCompany(companyName);\n    }\n    /**\n   * Create new company\n   */ async createCompany(companyName) {\n        if (!this.db) {\n            throw new Error(\"Firebase not initialized\");\n        }\n        const normalizedName = normalizeCompanyName(companyName);\n        const aliases = generateAliases(companyName);\n        const companyData = {\n            name: companyName.trim(),\n            normalizedName,\n            aliases,\n            submissionCount: 0,\n            commonFlags: [],\n            averageFlagCount: 0,\n            severityTrends: {\n                light: 0,\n                medium: 0\n            },\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n        };\n        try {\n            const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(this.db, \"companies\"), companyData);\n            const newCompany = {\n                id: docRef.id,\n                ...companyData,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            };\n            // Add to cache\n            companyCache.companies.push(newCompany);\n            return newCompany;\n        } catch (error) {\n            console.error(\"Error creating company:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Update company with submission data\n   */ async updateCompanyWithSubmission(companyId, submissionData) {\n        if (!this.db) {\n            console.warn(\"Firebase not initialized. Skipping company update.\");\n            return;\n        }\n        try {\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(this.db, \"companies\", companyId);\n            // Get current company data\n            const company = companyCache.companies.find((c)=>c.id === companyId);\n            if (!company) {\n                console.warn(\"Company not found in cache for update\");\n                return;\n            }\n            const updatedData = {\n                submissionCount: company.submissionCount + 1,\n                commonFlags: Array.from(new Set([\n                    ...company.commonFlags,\n                    ...submissionData.markedFlags\n                ])),\n                averageFlagCount: (company.averageFlagCount * company.submissionCount + submissionData.markedFlags.length) / (company.submissionCount + 1),\n                severityTrends: {\n                    light: company.severityTrends.light + submissionData.severityBreakdown.light,\n                    medium: company.severityTrends.medium + submissionData.severityBreakdown.medium\n                },\n                lastSubmission: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n                updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n            };\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(docRef, updatedData);\n            // Update cache\n            const cacheIndex = companyCache.companies.findIndex((c)=>c.id === companyId);\n            if (cacheIndex !== -1) {\n                companyCache.companies[cacheIndex] = {\n                    ...company,\n                    ...updatedData,\n                    lastSubmission: new Date(),\n                    updatedAt: new Date()\n                };\n            }\n        } catch (error) {\n            console.error(\"Error updating company with submission:\", error);\n        // Don't throw error - company update is not critical\n        }\n    }\n    /**\n   * Refresh companies cache\n   */ async refreshCompanies() {\n        companyCache = {\n            companies: [],\n            lastUpdated: 0,\n            isLoaded: false\n        };\n        await this.loadAllCompanies();\n    }\n    /**\n   * Get all companies (cached)\n   */ async getAllCompanies() {\n        return this.loadAllCompanies();\n    }\n    constructor(){\n        this.db = (0,_firebase__WEBPACK_IMPORTED_MODULE_1__.getFirestoreDB)();\n    // Private constructor for singleton\n    }\n}\n// Export singleton instance\nconst companyService = CompanyService.getInstance();\n// Legacy functions for backward compatibility\nconst getCompanyInsights = async (companyName)=>{\n    const companies = await companyService.searchCompanies(companyName, 1);\n    return companies.length > 0 ? companies[0] : null;\n};\nconst updateCompanyInsights = async (companyName, submissionData)=>{\n    const companies = await companyService.searchCompanies(companyName, 1);\n    if (companies.length > 0) {\n        await companyService.updateCompanyWithSubmission(companies[0].id, submissionData);\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/companyUtils.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/firebase.ts":
/*!*************************!*\
  !*** ./lib/firebase.ts ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   app: function() { return /* binding */ app; },\n/* harmony export */   db: function() { return /* binding */ db; },\n/* harmony export */   generateSessionId: function() { return /* binding */ generateSessionId; },\n/* harmony export */   getCompanyInsights: function() { return /* binding */ getCompanyInsights; },\n/* harmony export */   getFirebaseApp: function() { return /* binding */ getFirebaseApp; },\n/* harmony export */   getFirestoreDB: function() { return /* binding */ getFirestoreDB; },\n/* harmony export */   hashIP: function() { return /* binding */ hashIP; },\n/* harmony export */   initializeFirebase: function() { return /* binding */ initializeFirebase; },\n/* harmony export */   normalizeCompanyName: function() { return /* binding */ normalizeCompanyName; },\n/* harmony export */   submitInterviewCheckup: function() { return /* binding */ submitInterviewCheckup; },\n/* harmony export */   updateCompanyInsights: function() { return /* binding */ updateCompanyInsights; },\n/* harmony export */   validateFirebaseConfig: function() { return /* binding */ validateFirebaseConfig; }\n/* harmony export */ });\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"(app-pages-browser)/./node_modules/firebase/app/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\n// Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCTMqWzORaG1eK0Tp-T8e0h39rDJpLMPPQ\",\n    authDomain: \"did-i-dodge-a-bullet.firebaseapp.com\",\n    projectId: \"did-i-dodge-a-bullet\",\n    storageBucket: \"did-i-dodge-a-bullet.firebasestorage.app\",\n    messagingSenderId: \"190454478964\",\n    appId: \"1:190454478964:web:8b54426780fe1792627921\"\n};\n// Singleton pattern to prevent multiple initializations\nlet firebaseApp = null;\nlet firestoreDB = null;\n// Initialize Firebase only once\nconst initializeFirebase = ()=>{\n    if (!firebaseApp) {\n        // Check if Firebase is already initialized\n        const existingApps = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApps)();\n        if (existingApps.length > 0) {\n            firebaseApp = existingApps[0];\n        } else {\n            firebaseApp = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(firebaseConfig);\n        }\n    }\n    if (!firestoreDB) {\n        firestoreDB = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getFirestore)(firebaseApp);\n    }\n    return {\n        app: firebaseApp,\n        db: firestoreDB\n    };\n};\n// Get Firebase instances\nconst getFirebaseApp = ()=>{\n    if (!firebaseApp) {\n        const { app } = initializeFirebase();\n        return app;\n    }\n    return firebaseApp;\n};\nconst getFirestoreDB = ()=>{\n    if (!firestoreDB) {\n        const { db } = initializeFirebase();\n        return db;\n    }\n    return firestoreDB;\n};\n// Export for backward compatibility\nconst db = getFirestoreDB();\nconst app = getFirebaseApp();\n// Validate configuration\nconst validateFirebaseConfig = ()=>{\n    const requiredKeys = [\n        \"NEXT_PUBLIC_FIREBASE_API_KEY\",\n        \"NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN\",\n        \"NEXT_PUBLIC_FIREBASE_PROJECT_ID\",\n        \"NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET\",\n        \"NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID\",\n        \"NEXT_PUBLIC_FIREBASE_APP_ID\"\n    ];\n    const missingKeys = requiredKeys.filter((key)=>!process.env[key]);\n    if (missingKeys.length > 0) {\n        console.error(\"Missing Firebase configuration keys:\", missingKeys);\n        return false;\n    }\n    return true;\n};\n// Initialize on module load\nif (true) {\n    // Only initialize on client side\n    try {\n        if (validateFirebaseConfig()) {\n            initializeFirebase();\n            console.log(\"✅ Firebase initialized successfully\");\n        } else {\n            console.warn(\"⚠️ Firebase configuration incomplete\");\n        }\n    } catch (error) {\n        console.error(\"❌ Firebase initialization failed:\", error);\n    }\n}\n// Database functions\nconst submitInterviewCheckup = async (data)=>{\n    if (!firestoreDB) {\n        throw new Error(\"Firebase not initialized. Please set up your Firebase configuration.\");\n    }\n    try {\n        const submissionData = {\n            ...data,\n            timestamp: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n        };\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(firestoreDB, \"submissions\"), submissionData);\n        // Update company insights if company name provided\n        if (data.companyName) {\n            await updateCompanyInsights(data.companyName, submissionData);\n        }\n        return docRef.id;\n    } catch (error) {\n        console.error(\"Error submitting interview checkup:\", error);\n        throw error;\n    }\n};\nconst updateCompanyInsights = async (companyName, submissionData)=>{\n    if (!firestoreDB) {\n        console.warn(\"Firebase not initialized. Skipping company insights update.\");\n        return;\n    }\n    try {\n        const normalizedCompanyName = normalizeCompanyName(companyName);\n        // Check if company insights already exist\n        const companyQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(firestoreDB, \"company_insights\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"companyName\", \"==\", normalizedCompanyName));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(companyQuery);\n        if (!querySnapshot.empty) {\n            // Update existing company insights\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.doc)(firestoreDB, \"company_insights\", querySnapshot.docs[0].id);\n            const existingData = querySnapshot.docs[0].data();\n            const updatedData = {\n                totalSubmissions: existingData.totalSubmissions + 1,\n                commonFlags: Array.from(new Set([\n                    ...existingData.commonFlags,\n                    ...submissionData.markedFlags\n                ])),\n                averageFlagCount: (existingData.averageFlagCount * existingData.totalSubmissions + submissionData.markedFlags.length) / (existingData.totalSubmissions + 1),\n                severityTrends: {\n                    light: existingData.severityTrends.light + submissionData.severityBreakdown.light,\n                    medium: existingData.severityTrends.medium + submissionData.severityBreakdown.medium\n                },\n                lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n            };\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.updateDoc)(docRef, updatedData);\n        } else {\n            // Create new company insights\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(firestoreDB, \"company_insights\"), {\n                companyName: normalizedCompanyName,\n                totalSubmissions: 1,\n                commonFlags: submissionData.markedFlags,\n                averageFlagCount: submissionData.markedFlags.length,\n                severityTrends: submissionData.severityBreakdown,\n                lastUpdated: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.serverTimestamp)()\n            });\n        }\n    } catch (error) {\n        console.error(\"Error updating company insights:\", error);\n    // Don't throw error - company insights update is not critical\n    }\n};\nconst getCompanyInsights = async (companyName)=>{\n    if (!firestoreDB) {\n        console.warn(\"Firebase not initialized. Cannot get company insights.\");\n        return null;\n    }\n    try {\n        const normalizedCompanyName = normalizeCompanyName(companyName);\n        const companyQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.collection)(firestoreDB, \"company_insights\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.where)(\"companyName\", \"==\", normalizedCompanyName));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_1__.getDocs)(companyQuery);\n        if (!querySnapshot.empty) {\n            return querySnapshot.docs[0].data();\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error getting company insights:\", error);\n        return null;\n    }\n};\n// Utility functions\nconst normalizeCompanyName = (input)=>{\n    return input.trim().toLowerCase().replace(/\\s+/g, \" \").replace(/[^\\w\\s-]/g, \"\").replace(/\\b(inc|corp|llc|ltd|co|company)\\b/g, \"\").trim();\n};\nconst generateSessionId = ()=>{\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n};\nconst hashIP = async (ip)=>{\n    const encoder = new TextEncoder();\n    const data = encoder.encode(ip);\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map((b)=>b.toString(16).padStart(2, \"0\")).join(\"\");\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/firebase.ts\n"));

/***/ })

}]);